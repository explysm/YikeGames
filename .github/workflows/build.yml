Name: Build and Release Electron App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # CRITICAL: Grants the GITHUB_TOKEN write access to create the release and tag
    permissions:
      contents: write 

    steps:
      # Step 1: Checks out your repository's code.
      - name: Checkout repository
        uses: actions/checkout@v4
        # Fetch all history to find the previous tag for changelog generation.
        with:
          fetch-depth: 0

      # Step 2: Sets up a Node.js environment.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Installs all project dependencies.
      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install --force

      # Step 4: Installs Wine and 32-bit support (i386) for Windows cross-compilation.
      - name: Install Wine and 32-bit Support
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y wine wine wine32:i386

      ## FIX: Install wamerican package to provide /usr/share/dict/words
      - name: Install Dictionary for Release Naming
        run: |
          # Use 'wamerican' which provides the dictionary file on modern Ubuntu/Debian
          sudo apt-get update
          sudo apt-get install -y wamerican
          
      # Step 5: Generate unique two-word name (e.g., "biscuit-dragon")
      - name: Generate Unique Release Name
        id: unique_name
        run: |
          # Get the total number of words in the dictionary file
          # wamerican installs a symlink to /usr/share/dict/words
          WORD_COUNT=$(wc -l < /usr/share/dict/words)
          
          # Generate two unique random line numbers
          R1=$((1 + $RANDOM % $WORD_COUNT))
          R2=$((1 + $RANDOM % $WORD_COUNT))
          
          # Get the words, convert to lowercase, and format
          WORD1=$(sed -n "${R1}p" /usr/share/dict/words | tr -d "[:punct:]" | tr '[:upper:]' '[:lower:]')
          WORD2=$(sed -n "${R2}p" /usr/share/dict/words | tr -d "[:punct:]" | tr '[:upper:]' '[:lower:]')
          
          UNIQUE_TAG="${WORD1}-${WORD2}"
          RELEASE_TITLE="${WORD1} ${WORD2} Build"
          
          echo "Generated Tag: $UNIQUE_TAG"
          
          # Set variables as outputs for the next step to consume
          echo "release_tag=$UNIQUE_TAG" >> $GITHUB_OUTPUT
          echo "release_title=$RELEASE_TITLE" >> $GITHUB_OUTPUT
      
      # Step 5.5 (NEW): Create the ver.txt file in the root directory for the app to read
      - name: Save Unique Tag to ver.txt
        run: echo "${{ steps.unique_name.outputs.release_tag }}" > ver.txt
      
      # Step 6: Generates the release notes from git commit history.
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Fetch all tags to get a full history
          git fetch --tags
          
          # Find the previous tag, or use a default if it's the first run
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          else
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Get the commit messages, formatted as a bulleted list
          NOTES=$(git log --pretty=format:"- %s" ${PREVIOUS_TAG}..HEAD)
          
          # Pass the notes to the next step
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      # Step 7: Runs the Electron build command.
      - name: Build and package the Electron app
        run: npm run build -- --linux --win
        env:
          # Passes the tokens required by electron-builder for signing/notarization
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Creates a new GitHub Release and uploads the build files.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        # Only run this step if the build is on the main branch
        if: startsWith(github.ref, 'refs/heads/main')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Use the new unique words generated in Step 5
          tag_name: ${{ steps.unique_name.outputs.release_tag }}
          name: ${{ steps.unique_name.outputs.release_title }}
          # Use the notes generated in the previous step
          body: ${{ steps.release_notes.outputs.notes }}
          files: |
            dist/*

